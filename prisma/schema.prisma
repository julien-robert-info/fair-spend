datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ShareMode {
  FAIR
  EGALITARIAN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  groups     Group[]
  membership Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id   Int    @id @default(autoincrement())
  name String

  shareMode ShareMode

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members Member[]
  invites Invite[]

  @@unique([name, ownerId])
}

model Member {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String

  income  Int?
  enabled Boolean @default(true)

  updatedAt DateTime @default(now()) @updatedAt

  expenses         Expense[]
  debts            Debt[]
  transferSended   Transfer[] @relation(name: "transferSender")
  transferReceived Transfer[] @relation(name: "transferReceiver")

  @@unique([groupId, userEmail])
}

model Invite {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  email String

  @@unique([email, groupId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String
  date        DateTime @default(now())

  groupId    Int
  payerEmail String
  payer      Member @relation(fields: [groupId, payerEmail], references: [groupId, userEmail])

  debts Debt[]
}

model Debt {
  id        Int     @id @default(autoincrement())
  amount    Int
  isRepayed Boolean @default(false)

  expenseId Int
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  groupId     Int
  debtorEmail String
  debtor      Member @relation(fields: [groupId, debtorEmail], references: [groupId, userEmail])

  paybacks   Payback[] @relation(name: "debt")
  payingBack Payback[] @relation(name: "counterDebt")
}

model Payback {
  id     Int @id @default(autoincrement())
  amount Int

  debtId Int
  debt   Debt @relation(name: "debt", fields: [debtId], references: [id], onDelete: Cascade)

  counterDebtId Int?
  counterDebt   Debt? @relation(name: "counterDebt", fields: [counterDebtId], references: [id], onDelete: Cascade)

  transferId Int?
  transfer   Transfer? @relation(fields: [transferId], references: [id], onDelete: Cascade)
}

model Transfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  date       DateTime @default(now())
  isConsumed Boolean

  groupId Int

  senderEmail String
  sender      Member @relation(name: "transferSender", fields: [groupId, senderEmail], references: [groupId, userEmail])

  receiverEmail String
  receiver      Member @relation(name: "transferReceiver", fields: [groupId, receiverEmail], references: [groupId, userEmail])

  paybacks Payback[]
}
