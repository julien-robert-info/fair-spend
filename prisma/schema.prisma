datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ShareMode {
  FAIR
  EGALITARIAN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  groups     Group[]
  membership Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id   String @id @default(cuid())
  name String

  shareMode ShareMode

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members Member[]
  Invite  Invite[]

  @@unique([name, ownerId])
}

model Member {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String

  @@unique([groupId, userEmail])
}

model Invite {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  email String

  @@unique([email, groupId])
}
